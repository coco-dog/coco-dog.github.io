<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>JWT快速入门</title>
    <link href="/2021/12/16/JWT%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
    <url>/2021/12/16/JWT%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="JWT快速入门"><a href="#JWT快速入门" class="headerlink" title="JWT快速入门"></a>JWT快速入门</h2><h3 id="什么是JWT"><a href="#什么是JWT" class="headerlink" title="什么是JWT"></a>什么是JWT</h3><p>在以前的学习中，我们知道session和cookie是为了记录客户端的状态，可以说是为了鉴权，就好比没有vip就不能听一些周董的歌，这些权利就需要通过cookie和session方式进行判断</p><p>今天介绍另一种鉴权技术token，回顾一下session，后端通过session创建的sid发送到前端cookie(一般是由cookie接收，也有其他方案)，第一次客户端发起请求会携带登陆信息到后台，登录成功后，后台回返回一个si d保存到cookie中，第二次之需要将sid传到后台与session对应，不需要登录信息的验证，减轻数据库的压力，但是占内存。</p><p>token完美解决了这一缺点，它不需要session的标识，直接把用户标识存放在客户端，在发起请求时携带token到后台，能正常解析就代表鉴权通过，用户第一次登陆携带登录信息发送的服务端，服务端返回token到客户端，第二次携带token就可以进行验证，session 一般在用户访问站点时就发出 sid 了，而 token 往往是用户登录之后才会发放一个 token 凭据。</p><h4 id="jwt"><a href="#jwt" class="headerlink" title="jwt"></a>jwt</h4><p>全称JSON Web Token，token的生成方式有多种，jwt可以大大降低系统的复杂度jwt由三部分组成，头部header，载荷payload，签名sign</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wzz;<br><br><span class="hljs-keyword">import</span> io.jsonwebtoken.JwtBuilder;<br><span class="hljs-keyword">import</span> io.jsonwebtoken.Jwts;<br><span class="hljs-keyword">import</span> io.jsonwebtoken.SignatureAlgorithm;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.UUID;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br><br>    <span class="hljs-keyword">long</span> time = <span class="hljs-number">1000</span>*<span class="hljs-number">60</span>;<br><br>    String signature = <span class="hljs-string">&quot;hello&quot;</span>;<br><br>    <span class="hljs-meta">@org</span>.junit.<span class="hljs-function">Test</span><br><span class="hljs-function">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>        JwtBuilder jwtBuilder = Jwts.builder();<br>        String jwtToken = jwtBuilder<br>                <span class="hljs-comment">//header</span><br>                .setHeaderParam(<span class="hljs-string">&quot;typ&quot;</span>,<span class="hljs-string">&quot;JWT&quot;</span>)<br>                .setHeaderParam(<span class="hljs-string">&quot;alg&quot;</span>,<span class="hljs-string">&quot;HS256&quot;</span>)<br>                <span class="hljs-comment">//paylog</span><br>                .claim(<span class="hljs-string">&quot;username&quot;</span>,<span class="hljs-string">&quot;wzz&quot;</span>)<br>                .claim(<span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-string">&quot;30&quot;</span>)<br>                <span class="hljs-comment">//token持续时间</span><br>                .setExpiration(<span class="hljs-keyword">new</span> Date(System.currentTimeMillis()+time))<br>                .setId(UUID.randomUUID().toString())<br>                <span class="hljs-comment">//signature</span><br>                .signWith(SignatureAlgorithm.HS256,signature)<br>                .compact();<br>        System.out.println(jwtToken);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9</span>.eyJ<span class="hljs-number">1</span>c<span class="hljs-number">2</span>VybmFtZSI<span class="hljs-number">6</span>Ind<span class="hljs-number">6</span>eiIsImFnZSI<span class="hljs-number">6</span>IjMwIiwiZXhwIjoxNjM<span class="hljs-number">5</span>NTg<span class="hljs-number">0</span>MTMwLCJqdGkiOiJlMmExZDFiZS<span class="hljs-number">02</span>ZGY<span class="hljs-number">3</span>LTQ<span class="hljs-number">3</span>MmQtOTAwNC<span class="hljs-number">02</span>OGFmOTIwMDQzZWUifQ.-gM-<span class="hljs-number">3</span>x<span class="hljs-number">63</span>UxdP<span class="hljs-number">2</span>YlquyU<span class="hljs-number">0</span>MabdE-ofcGjcPN<span class="hljs-number">5</span>WE_C<span class="hljs-number">2</span>lDE<br><br></code></pre></td></tr></table></figure><p><strong>这样生成一个完整的token</strong></p><p>三部分分别使用.隔开，第一二部分都是使用base64加密，第三部分是将第一二部分拼接起来，使用header中的alg加密方式加密，再使用base64加密拼接到第二部分后面，形成一个完整的token</p><p>头部header</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs 1c">&#123;<br>  &#x27;typ&#x27;: &#x27;JWT&#x27;,<br>  &#x27;alg&#x27;: &#x27;HS256&#x27;<br>&#125;<br></code></pre></td></tr></table></figure><p>typ代表token的类型，alg为加密方式</p><p>载荷payload</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;sub&quot;</span>: <span class="hljs-string">&quot;1234567890&quot;</span>,<br>  <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;wzzzzzzzz&quot;</span>,<br>  <span class="hljs-attr">&quot;admin&quot;</span>: <span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure><p>载荷存储的是传输的数据，和保存时间等信息</p><p>签名</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">var encodedString = base64<span class="hljs-constructor">UrlEncode(<span class="hljs-params">header</span>)</span> + <span class="hljs-character">&#x27;.&#x27;</span> + base64<span class="hljs-constructor">UrlEncode(<span class="hljs-params">payload</span>)</span>;<br>var signature = <span class="hljs-constructor">HMACSHA256(<span class="hljs-params">encodedString</span>, &#x27;<span class="hljs-params">secret</span>&#x27;)</span>; <br><br></code></pre></td></tr></table></figure><p>token持续时间到期和错误回抛出异常，这样就直接避免了session中需要判断的缺点</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">io</span>.jsonwebtoken.ExpiredJwtException: JWT expired at <span class="hljs-number">2021</span>-<span class="hljs-number">12</span>-<span class="hljs-number">16</span>T<span class="hljs-number">00</span>:<span class="hljs-number">02</span>:<span class="hljs-number">10</span>Z. Current time: <span class="hljs-number">2021</span>-<span class="hljs-number">12</span>-<span class="hljs-number">16</span>T<span class="hljs-number">00</span>:<span class="hljs-number">11</span>:<span class="hljs-number">06</span>Z, a difference of <span class="hljs-number">536441</span> milliseconds.  Allowed clock skew: <span class="hljs-number">0</span> milliseconds.<br><br></code></pre></td></tr></table></figure><p>token解析</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public void parse<span class="hljs-literal">()</span>&#123;<br>        String token = <span class="hljs-string">&quot;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6Ind6eiIsImFnZSI6IjMwIiwiZXhwIjoxNjM5NTg0OTY5LCJqdGkiOiI4MDIyMzAyNi0zOGEwLTQzOTgtOTdhNC0yZjAzZTQxZGY5MGYifQ.0UH68OWOKHQHSB5cTo5C50o8Gb9jdBJyU0I58xweUOE&quot;</span>;<br>        JwtParser parser = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Jwts</span>.</span></span>parser<span class="hljs-literal">()</span>;<br>        Jws&lt;Claims&gt; claimsJws = parser.set<span class="hljs-constructor">SigningKey(<span class="hljs-params">signature</span>)</span>.parse<span class="hljs-constructor">ClaimsJws(<span class="hljs-params">token</span>)</span>;<br>        Claims body = claimsJws.get<span class="hljs-constructor">Body()</span>;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(body.get(<span class="hljs-string">&quot;username&quot;</span>));<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(body.get(<span class="hljs-string">&quot;age&quot;</span>));<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(body.get<span class="hljs-constructor">Id()</span>);<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(body.get<span class="hljs-constructor">Expiration()</span>);<br>    &#125;<br>    <br> <br>wzz<br><span class="hljs-number">30</span><br><span class="hljs-number">80223026</span>-<span class="hljs-number">38</span>a0-<span class="hljs-number">4398</span>-<span class="hljs-number">97</span>a4-<span class="hljs-number">2</span>f03e41df90f<br>Thu Dec <span class="hljs-number">16</span> <span class="hljs-number">00</span>:<span class="hljs-number">16</span>:<span class="hljs-number">09</span> CST <span class="hljs-number">2021</span><br><br></code></pre></td></tr></table></figure><p>有效的token可以直接解析出载荷中的值</p><p><img src="https://gitee.com/coco-dog/img/jwt.png" alt="jwt"></p><p>JWT的工作流程就是这样，觉得不错的可以给我的仓库点个赞<a href="https://github.com/coco-dog/coco-dog.github.io">https://github.com/coco-dog/coco-dog.github.io</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>elasticsearch环境搭建</title>
    <link href="/2021/12/12/elasticsearch%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <url>/2021/12/12/elasticsearch%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="elasticsaerch安装"><a href="#elasticsaerch安装" class="headerlink" title="elasticsaerch安装"></a>elasticsaerch安装</h2><p>下载地址：<a href="https://www.elastic.co/cn/downloads/elasticsearch" target="_blank">elasticsearch</a></p><p>解压到/usr/local中,输入命令</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/elasticsearch/</span>bin<br>./elasticsearch<br></code></pre></td></tr></table></figure><p>访问端口为9200</p><h2 id="elasticsearch-head安装"><a href="#elasticsearch-head安装" class="headerlink" title="elasticsearch-head安装"></a>elasticsearch-head安装</h2><p>下载地址：<a href="https://github.com/mobz/elasticsearch-head" target="_blank">elasticsearch-head</a></p><p>下载完压缩包解压到/usr/local中,输入命令</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd <span class="hljs-regexp">/usr/</span>local/elasticsearch-head<br>cnpm install<br></code></pre></td></tr></table></figure><p>安装完成依赖后在elasticsearch中的配置文件中配置解决跨域问题</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/elasticsearch/</span>config<br>vim elasticsearch.yml<br><span class="hljs-comment">#输入跨域访问</span><br>http.cors.enabled: true<br>http.cors.allow-origin: <span class="hljs-string">&quot;*&quot;</span><br></code></pre></td></tr></table></figure><p>接下来启动elasticsearch</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">cd</span> /usr/local/elastic<span class="hljs-built_in">search-head</span><br>npm run <span class="hljs-built_in">start</span><br></code></pre></td></tr></table></figure><p>访问端口为9100</p><h2 id="安装kibana"><a href="#安装kibana" class="headerlink" title="安装kibana"></a>安装kibana</h2><p>下载地址: <a href="https://www.elastic.co/cn/downloads/kibana" target="_blank">kibana</a></p><p>下载完压缩包解压到/usr/local中，输入命令</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/kibana/</span>bin<br>./kibana<br><br></code></pre></td></tr></table></figure><p>访问端口为5601</p><p>需要汉化可以在配置文件中输入以下命令</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/kibana/</span>config<br>vim kibana.yml<br><span class="hljs-comment">#汉化</span><br>i18n.locale: <span class="hljs-string">&quot;zh-CN&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/12/08/hello-world/"/>
    <url>/2021/12/08/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
